// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAbsence = `-- name: CreateAbsence :one
INSERT INTO absences (
  id_karyawan,
  nama_karyawan,
  tanggal,
  jam_masuk,
  jam_jadwal,
  terlambat,
  cuaca,
  latitude,
  longitude,
  hari
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, id_karyawan, nama_karyawan, tanggal, jam_masuk, jam_jadwal, terlambat, cuaca, latitude, longitude, hari, created_at
`

type CreateAbsenceParams struct {
	IDKaryawan   int32       `json:"id_karyawan"`
	NamaKaryawan string      `json:"nama_karyawan"`
	Tanggal      pgtype.Date `json:"tanggal"`
	JamMasuk     pgtype.Time `json:"jam_masuk"`
	JamJadwal    pgtype.Time `json:"jam_jadwal"`
	Terlambat    bool        `json:"terlambat"`
	Cuaca        pgtype.Text `json:"cuaca"`
	Latitude     float64     `json:"latitude"`
	Longitude    float64     `json:"longitude"`
	Hari         string      `json:"hari"`
}

func (q *Queries) CreateAbsence(ctx context.Context, arg CreateAbsenceParams) (Absence, error) {
	row := q.db.QueryRow(ctx, createAbsence,
		arg.IDKaryawan,
		arg.NamaKaryawan,
		arg.Tanggal,
		arg.JamMasuk,
		arg.JamJadwal,
		arg.Terlambat,
		arg.Cuaca,
		arg.Latitude,
		arg.Longitude,
		arg.Hari,
	)
	var i Absence
	err := row.Scan(
		&i.ID,
		&i.IDKaryawan,
		&i.NamaKaryawan,
		&i.Tanggal,
		&i.JamMasuk,
		&i.JamJadwal,
		&i.Terlambat,
		&i.Cuaca,
		&i.Latitude,
		&i.Longitude,
		&i.Hari,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    password,
    role,
    name
) VALUES (
    $1, $2, $3, $4
) RETURNING id, email, password, role, name, created_at, updated_at
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Role     string `json:"role"`
	Name     string `json:"name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAbsence = `-- name: DeleteAbsence :exec
DELETE FROM absences
WHERE id = $1
`

func (q *Queries) DeleteAbsence(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAbsence, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAbsence = `-- name: GetAbsence :one
SELECT id, id_karyawan, nama_karyawan, tanggal, jam_masuk, jam_jadwal, terlambat, cuaca, latitude, longitude, hari, created_at FROM absences
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAbsence(ctx context.Context, id int32) (Absence, error) {
	row := q.db.QueryRow(ctx, getAbsence, id)
	var i Absence
	err := row.Scan(
		&i.ID,
		&i.IDKaryawan,
		&i.NamaKaryawan,
		&i.Tanggal,
		&i.JamMasuk,
		&i.JamJadwal,
		&i.Terlambat,
		&i.Cuaca,
		&i.Latitude,
		&i.Longitude,
		&i.Hari,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, role, name, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAbsences = `-- name: ListAbsences :many
SELECT id, id_karyawan, nama_karyawan, tanggal, jam_masuk, jam_jadwal, terlambat, cuaca, latitude, longitude, hari, created_at FROM absences
ORDER BY tanggal DESC, jam_masuk DESC
`

func (q *Queries) ListAbsences(ctx context.Context) ([]Absence, error) {
	rows, err := q.db.Query(ctx, listAbsences)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Absence
	for rows.Next() {
		var i Absence
		if err := rows.Scan(
			&i.ID,
			&i.IDKaryawan,
			&i.NamaKaryawan,
			&i.Tanggal,
			&i.JamMasuk,
			&i.JamJadwal,
			&i.Terlambat,
			&i.Cuaca,
			&i.Latitude,
			&i.Longitude,
			&i.Hari,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password, role, name, created_at, updated_at FROM users
ORDER BY created_at DESC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Role,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAbsence = `-- name: UpdateAbsence :one
UPDATE absences
SET cuaca = $2
WHERE id = $1
RETURNING id, id_karyawan, nama_karyawan, tanggal, jam_masuk, jam_jadwal, terlambat, cuaca, latitude, longitude, hari, created_at
`

type UpdateAbsenceParams struct {
	ID    int32       `json:"id"`
	Cuaca pgtype.Text `json:"cuaca"`
}

func (q *Queries) UpdateAbsence(ctx context.Context, arg UpdateAbsenceParams) (Absence, error) {
	row := q.db.QueryRow(ctx, updateAbsence, arg.ID, arg.Cuaca)
	var i Absence
	err := row.Scan(
		&i.ID,
		&i.IDKaryawan,
		&i.NamaKaryawan,
		&i.Tanggal,
		&i.JamMasuk,
		&i.JamJadwal,
		&i.Terlambat,
		&i.Cuaca,
		&i.Latitude,
		&i.Longitude,
		&i.Hari,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    email = $2,
    password = $3,
    role = $4,
    name = $5,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, email, password, role, name, created_at, updated_at
`

type UpdateUserParams struct {
	ID       int32  `json:"id"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Role     string `json:"role"`
	Name     string `json:"name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
