// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAbsence = `-- name: CreateAbsence :one
INSERT INTO absences (
    user_id,
    clock_in,
    location,
    weather
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, clock_in, clock_out, location, weather, created_at, updated_at
`

type CreateAbsenceParams struct {
	UserID   int32              `json:"user_id"`
	ClockIn  pgtype.Timestamptz `json:"clock_in"`
	Location pgtype.Text        `json:"location"`
	Weather  pgtype.Text        `json:"weather"`
}

func (q *Queries) CreateAbsence(ctx context.Context, arg CreateAbsenceParams) (Absence, error) {
	row := q.db.QueryRow(ctx, createAbsence,
		arg.UserID,
		arg.ClockIn,
		arg.Location,
		arg.Weather,
	)
	var i Absence
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClockIn,
		&i.ClockOut,
		&i.Location,
		&i.Weather,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createReport = `-- name: CreateReport :one
INSERT INTO reports (
    jenis_transaksi,
    kategori_transaksi,
    jumlah,
    keterangan
) VALUES (
    $1, $2, $3, $4
) RETURNING id, tanggal, jenis_transaksi, kategori_transaksi, jumlah, keterangan, created_at, updated_at
`

type CreateReportParams struct {
	JenisTransaksi    string         `json:"jenis_transaksi"`
	KategoriTransaksi string         `json:"kategori_transaksi"`
	Jumlah            pgtype.Numeric `json:"jumlah"`
	Keterangan        pgtype.Text    `json:"keterangan"`
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (Report, error) {
	row := q.db.QueryRow(ctx, createReport,
		arg.JenisTransaksi,
		arg.KategoriTransaksi,
		arg.Jumlah,
		arg.Keterangan,
	)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.Tanggal,
		&i.JenisTransaksi,
		&i.KategoriTransaksi,
		&i.Jumlah,
		&i.Keterangan,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createStock = `-- name: CreateStock :one
INSERT INTO stocks (
    nama_menu,
    jumlah_terjual,
    kategori_menu,
    harga_satuan,
    total_penjualan
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, tanggal, nama_menu, jumlah_terjual, kategori_menu, harga_satuan, total_penjualan, created_at, updated_at
`

type CreateStockParams struct {
	NamaMenu       string         `json:"nama_menu"`
	JumlahTerjual  int32          `json:"jumlah_terjual"`
	KategoriMenu   pgtype.Text    `json:"kategori_menu"`
	HargaSatuan    pgtype.Numeric `json:"harga_satuan"`
	TotalPenjualan pgtype.Numeric `json:"total_penjualan"`
}

func (q *Queries) CreateStock(ctx context.Context, arg CreateStockParams) (Stock, error) {
	row := q.db.QueryRow(ctx, createStock,
		arg.NamaMenu,
		arg.JumlahTerjual,
		arg.KategoriMenu,
		arg.HargaSatuan,
		arg.TotalPenjualan,
	)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.Tanggal,
		&i.NamaMenu,
		&i.JumlahTerjual,
		&i.KategoriMenu,
		&i.HargaSatuan,
		&i.TotalPenjualan,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    password,
    name,
    role
) VALUES (
    $1, $2, $3, $4
) RETURNING id, email, password, name, role, created_at, updated_at
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Name     string `json:"name"`
	Role     string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.Name,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAbsence = `-- name: DeleteAbsence :exec
DELETE FROM absences
WHERE id = $1
`

func (q *Queries) DeleteAbsence(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAbsence, id)
	return err
}

const deleteReport = `-- name: DeleteReport :exec
DELETE FROM reports
WHERE id = $1
`

func (q *Queries) DeleteReport(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteReport, id)
	return err
}

const deleteStock = `-- name: DeleteStock :exec
DELETE FROM stocks
WHERE id = $1
`

func (q *Queries) DeleteStock(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteStock, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAbsence = `-- name: GetAbsence :one
SELECT id, user_id, clock_in, clock_out, location, weather, created_at, updated_at FROM absences
WHERE id = $1
`

func (q *Queries) GetAbsence(ctx context.Context, id int32) (Absence, error) {
	row := q.db.QueryRow(ctx, getAbsence, id)
	var i Absence
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClockIn,
		&i.ClockOut,
		&i.Location,
		&i.Weather,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getReport = `-- name: GetReport :one
SELECT id, tanggal, jenis_transaksi, kategori_transaksi, jumlah, keterangan, created_at, updated_at FROM reports
WHERE id = $1
`

func (q *Queries) GetReport(ctx context.Context, id int32) (Report, error) {
	row := q.db.QueryRow(ctx, getReport, id)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.Tanggal,
		&i.JenisTransaksi,
		&i.KategoriTransaksi,
		&i.Jumlah,
		&i.Keterangan,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStock = `-- name: GetStock :one
SELECT id, tanggal, nama_menu, jumlah_terjual, kategori_menu, harga_satuan, total_penjualan, created_at, updated_at FROM stocks
WHERE id = $1
`

func (q *Queries) GetStock(ctx context.Context, id int32) (Stock, error) {
	row := q.db.QueryRow(ctx, getStock, id)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.Tanggal,
		&i.NamaMenu,
		&i.JumlahTerjual,
		&i.KategoriMenu,
		&i.HargaSatuan,
		&i.TotalPenjualan,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, name, role, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAbsences = `-- name: ListAbsences :many
SELECT id, user_id, clock_in, clock_out, location, weather, created_at, updated_at FROM absences
ORDER BY clock_in DESC
`

func (q *Queries) ListAbsences(ctx context.Context) ([]Absence, error) {
	rows, err := q.db.Query(ctx, listAbsences)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Absence
	for rows.Next() {
		var i Absence
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ClockIn,
			&i.ClockOut,
			&i.Location,
			&i.Weather,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReports = `-- name: ListReports :many
SELECT id, tanggal, jenis_transaksi, kategori_transaksi, jumlah, keterangan, created_at, updated_at FROM reports
ORDER BY tanggal DESC
`

func (q *Queries) ListReports(ctx context.Context) ([]Report, error) {
	rows, err := q.db.Query(ctx, listReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.ID,
			&i.Tanggal,
			&i.JenisTransaksi,
			&i.KategoriTransaksi,
			&i.Jumlah,
			&i.Keterangan,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStocks = `-- name: ListStocks :many
SELECT id, tanggal, nama_menu, jumlah_terjual, kategori_menu, harga_satuan, total_penjualan, created_at, updated_at FROM stocks
ORDER BY tanggal DESC
`

func (q *Queries) ListStocks(ctx context.Context) ([]Stock, error) {
	rows, err := q.db.Query(ctx, listStocks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(
			&i.ID,
			&i.Tanggal,
			&i.NamaMenu,
			&i.JumlahTerjual,
			&i.KategoriMenu,
			&i.HargaSatuan,
			&i.TotalPenjualan,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, name, role, created_at FROM users
ORDER BY created_at DESC
`

type ListUsersRow struct {
	ID        int32              `json:"id"`
	Email     string             `json:"email"`
	Name      string             `json:"name"`
	Role      string             `json:"role"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAbsence = `-- name: UpdateAbsence :one
UPDATE absences
SET
    user_id = $2,
    clock_in = $3,
    clock_out = $4,
    location = $5,
    weather = $6,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, clock_in, clock_out, location, weather, created_at, updated_at
`

type UpdateAbsenceParams struct {
	ID       int32              `json:"id"`
	UserID   int32              `json:"user_id"`
	ClockIn  pgtype.Timestamptz `json:"clock_in"`
	ClockOut pgtype.Timestamptz `json:"clock_out"`
	Location pgtype.Text        `json:"location"`
	Weather  pgtype.Text        `json:"weather"`
}

func (q *Queries) UpdateAbsence(ctx context.Context, arg UpdateAbsenceParams) (Absence, error) {
	row := q.db.QueryRow(ctx, updateAbsence,
		arg.ID,
		arg.UserID,
		arg.ClockIn,
		arg.ClockOut,
		arg.Location,
		arg.Weather,
	)
	var i Absence
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClockIn,
		&i.ClockOut,
		&i.Location,
		&i.Weather,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateReport = `-- name: UpdateReport :one
UPDATE reports
SET
    jenis_transaksi = $2,
    kategori_transaksi = $3,
    jumlah = $4,
    keterangan = $5,
    updated_at = NOW()
WHERE id = $1
RETURNING id, tanggal, jenis_transaksi, kategori_transaksi, jumlah, keterangan, created_at, updated_at
`

type UpdateReportParams struct {
	ID                int32          `json:"id"`
	JenisTransaksi    string         `json:"jenis_transaksi"`
	KategoriTransaksi string         `json:"kategori_transaksi"`
	Jumlah            pgtype.Numeric `json:"jumlah"`
	Keterangan        pgtype.Text    `json:"keterangan"`
}

func (q *Queries) UpdateReport(ctx context.Context, arg UpdateReportParams) (Report, error) {
	row := q.db.QueryRow(ctx, updateReport,
		arg.ID,
		arg.JenisTransaksi,
		arg.KategoriTransaksi,
		arg.Jumlah,
		arg.Keterangan,
	)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.Tanggal,
		&i.JenisTransaksi,
		&i.KategoriTransaksi,
		&i.Jumlah,
		&i.Keterangan,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStock = `-- name: UpdateStock :one
UPDATE stocks
SET
    nama_menu = $2,
    jumlah_terjual = $3,
    kategori_menu = $4,
    harga_satuan = $5,
    total_penjualan = $6,
    updated_at = NOW()
WHERE id = $1
RETURNING id, tanggal, nama_menu, jumlah_terjual, kategori_menu, harga_satuan, total_penjualan, created_at, updated_at
`

type UpdateStockParams struct {
	ID             int32          `json:"id"`
	NamaMenu       string         `json:"nama_menu"`
	JumlahTerjual  int32          `json:"jumlah_terjual"`
	KategoriMenu   pgtype.Text    `json:"kategori_menu"`
	HargaSatuan    pgtype.Numeric `json:"harga_satuan"`
	TotalPenjualan pgtype.Numeric `json:"total_penjualan"`
}

func (q *Queries) UpdateStock(ctx context.Context, arg UpdateStockParams) (Stock, error) {
	row := q.db.QueryRow(ctx, updateStock,
		arg.ID,
		arg.NamaMenu,
		arg.JumlahTerjual,
		arg.KategoriMenu,
		arg.HargaSatuan,
		arg.TotalPenjualan,
	)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.Tanggal,
		&i.NamaMenu,
		&i.JumlahTerjual,
		&i.KategoriMenu,
		&i.HargaSatuan,
		&i.TotalPenjualan,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    email = $2,
    password = $3,
    name = $4,
    role = $5,
    updated_at = NOW()
WHERE id = $1
RETURNING id, email, password, name, role, created_at, updated_at
`

type UpdateUserParams struct {
	ID       int32  `json:"id"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Name     string `json:"name"`
	Role     string `json:"role"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.Name,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
